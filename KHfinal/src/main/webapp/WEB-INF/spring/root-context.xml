<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- Root Context: defines shared resources visible to all other web components -->
		
	<!-- properties 이용 -->
	<context:property-placeholder location="classpath:properties/jjap.properties"/>
	
<!-- DB관련 -->
	<!-- DBCP 생성 -->
	<!-- 빈에 등록. 필요한 순간 spring이 만들어서 운용해줌 -->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="dataSource" destroy-method="close"> 
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
	</bean> 
<!-- myBatis Session -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>	
<!-- Transaction Manager(commit/rollback의 기반) -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
		<!-- <constructor-arg ref="dataSource" /> -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
<!-- @Transactional 사용되는 코드를 AOP를 통해서 설정함 //TODO -->
	<tx:annotation-driven/>

<!-- 이메일 알림 관련 bean 등록 -->
	<!-- set메서드로 의존성 주입 -->
	<bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<!-- smtp.naver.com -->
		<!-- 기업회원에게 메일을 보내는 메일 주소의 플랫폼 -->
		<property name="host" value="smtp.naver.com" />

		<!-- 메일 주소 플랫폼의 포트 번호 -->
		<property name="port" value="587" />

		<!-- 보낼 사용자 계정의 아이디 -->
		<property name="username" value="${email.account}" />
		<!-- 보낼 사용자 계정의 비밀번호 -->
		<!-- properties 파일을 사용해서 value에 넣어줌 위치는 properties에 있음 -->
		<property name="password" value="${email.password}" />

		<!-- 네이버 -->
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtp.auth">true </prop>
				<prop key="mail.transport.protocol">smtp</prop>
				<prop key="mail.debug">true</prop>
				<prop key="mail.smtps.ssl.trust">*</prop>
				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
			</props>
		</property>
	</bean>
</beans>
